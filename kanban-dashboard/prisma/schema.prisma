// vim: nnoremap <leader>= <cmd>!npx prisma format<cr>
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Department {
  id         Int      @id @default(autoincrement())
  long_name  String
  short_name String   @unique
  Degree     Degree[]
}

model Course {
  code                  String @id
  subjectCode           String
  number                Int
  description           String @db.LongText
  // string because it can be range or single number and we only need
  // to display it either way
  minUnits              Int
  maxUnits              Int
  // string of comma separated terms
  // TODO: make this a bitmask
  termsTypicallyOffered String

  fulfillsRequirements CourseRequirement[]
}

model CourseRequirement {
  // TODO: figure out how to make unique ids based on the CourseRequirement
  id                  Int    @id @default(autoincrement())
  course              Course @relation(fields: [courseCode], references: [code])
  degree              Degree @relation(fields: [degreeId], references: [id])
  // Ge, major, tech elective, etc.
  // TODO: make this an enum
  kind                String
  // 0,1,2,3
  recommendedYear     Int
  recommendedTermCode Int

  courseCode String
  degreeId   String

  @@unique([courseCode, degreeId])
}

model Degree {
  id                 String              @id
  name               String
  link               String
  // BS, BA, etc.
  kind               String
  courseRequirements CourseRequirement[]
  Department         Department?         @relation(fields: [departmentId], references: [id])
  departmentId       Int?

  @@unique([name, kind])
}

model User {
  calPolyUsername String          @id
  year            Int
  flowcharts      UserFlowchart[]
}

model UserFlowchart {
  id                  Int    @id @default(autoincrement())
  user                User   @relation(fields: [userCalPolyUsername], references: [calPolyUsername])
  startYear           Int
  userCalPolyUsername String
}
