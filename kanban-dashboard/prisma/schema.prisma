// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Department {
  id         Int          @id @default(autoincrement())
  long_name  String
  short_name String       @unique
  Degree     Degree[]
  Instructor Instructor[]
}

model Course {
  code                  String @id
  subject               String
  description         String @db.MediumText 
  // string because it can be range or single number and we only need
  // to display it either way
  units                 String
  // string of comma separated terms
  termsTypicallyOffered String

  fulfillsRequirements Requirement[]

  prerequisites   Prerequisite[] @relation("Prereq")
  prerequisiteFor Prerequisite[] @relation("PrereqFor")
  sections        Section[]
}

model Prerequisite {
  id                 Int    @id @default(autoincrement())
  requiredCourse     Course @relation(name: "Prereq", fields: [requiredCourseCode], references: [code])
  forCourse          Course @relation(name: "PrereqFor", fields: [forCourseCode], references: [code])
  forCourseCode      String
  requiredCourseCode String

  @@unique([requiredCourseCode, forCourseCode])
}

model Requirement {
  // TODO: figure out how to make unique ids based on the requirement
  id     Int    @id @default(autoincrement())
  course Course @relation(fields: [courseCode], references: [code])
  degree Degree @relation(fields: [degreeId], references: [id])
  // Ge, major, tech elective, etc.
  // TODO: make this an enum
  kind   String

  courseCode String
  degreeId   String
}

model Degree {
  id           String           @id
  name         String
  link         String
  // BS, BA, etc.
  kind         String
  requirements Requirement[]
  Department   Department?   @relation(fields: [departmentId], references: [id])
  departmentId Int?

  @@unique([name, kind])
}

model Catolog {
  id        Int @id @default(autoincrement())
  startYear Int
  endYear   Int
}

model Instructor {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  officeHours  String
  Section      Section[]
}

// TODO: make sure this is the best way we could store this
model Meeting {
  id                 Int      @id @default(autoincrement())
  startTime          DateTime
  endTime            DateTime
  section            Section? @relation(fields: [sectionClassNumber], references: [classNumber])
  sectionClassNumber Int?
  location           String
}

model Availability {
  id                 Int      @id @default(autoincrement())
  seats              Int
  capacity           Int
  waitlist           Int
  waitlistCapacity   Int
  time               DateTime @default(now())
  section            Section  @relation(fields: [sectionClassNumber], references: [classNumber])
  sectionClassNumber Int
}

model Section {
  classNumber      Int            @id
  course           Course         @relation(fields: [courseCode], references: [code])
  courseCode       String
  quarter          Quarter        @relation(fields: [quarterId], references: [id])
  quarterId        Int
  status           String
  session          String
  intstructionMode String
  career           String
  // TODO: make sure this aligns with a quarters start and end
  // dates      MeetingTime
  instructor       Instructor     @relation(fields: [instructorId], references: [id])
  instructorId     Int
  meetings         Meeting[]
  grading          String
  location         String
  campus           String
  classComponents  String
  availability     Availability[]
}

model Quarter {
  id                  Int            @id @default(autoincrement())
  term                String
  year                Int
  classes             Section[]
  user                User?          @relation(fields: [userCalPolyUsername], references: [calPolyUsername])
  userCalPolyUsername String?
  UserFlowchart       UserFlowchart? @relation(fields: [userFlowchartId], references: [id])
  userFlowchartId     Int?
  startDate           DateTime
  endDate             DateTime
}

model User {
  calPolyUsername String          @id
  year            Int
  flowcharts      UserFlowchart[]
  Quarter         Quarter[]
}

model UserFlowchart {
  id                  Int       @id @default(autoincrement())
  user                User      @relation(fields: [userCalPolyUsername], references: [calPolyUsername])
  quarters            Quarter[]
  startYear           Int
  userCalPolyUsername String
}
