// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// NOTE: models have either id or code fields
// Models whose primary key is not explicitly used by cal poly have an id field although it may be something aquired from cal poly such as 
// the degree id which is determined from the degree page url path on the catalog site
// Models (such as subject) whose primary key is used by cal poly have a code field

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  code                  String  @id
  subjectCode           String
  subject               Subject @relation(fields: [subjectCode], references: [code])
  title                 String
  number                Int
  description           String  @db.LongText
  // string because it can be range or single number and we only need
  // to display it either way
  minUnits              Int
  maxUnits              Int
  // string of comma separated terms
  // TODO: make this a bitmask
  termsTypicallyOffered String

  fullfillsGERequirements     GEAreaFullfillmentCourse[]
  fullfillsCourseRequirements CourseRequirement[]
  USCP                        Boolean                    @default(false)
  GWR                         Boolean                    @default(false)

  @@index([code, USCP, GWR])
}

model Subject {
  code    String   @id
  name    String
  courses Course[]
}

// TODO: make this a type
model RecommendedCompletion {
  year              Int
  term              Term
  GERequirement     GERequirement[]
  CourseRequirement CourseRequirement[]

  @@id([year, term])
}

enum Term {
  F
  W
  SP
  SU
}

enum GEArea {
  A
  B
  C
  D
  E
  F
  ELECTIVE
}

enum GESubArea {
  LowerDivision
  UpperDivision
  LowerDivisionElective
  UpperDivisionElective
  F
  E
  Elective
  A1
  A2
  A3
  A4
  B1
  B2
  B3
  B4
  C1
  C2
  C3
  C4
  D1
  D2
  D3
  D4
}

model GERequirement {
  area                      GEArea
  subArea                   GESubArea
  units                     Int
  recommendedCompletion     RecommendedCompletion? @relation(fields: [recommendedCompletionYear, recommendedCompletionTerm], references: [year, term])
  recommendedCompletionYear Int?
  recommendedCompletionTerm Term?
  degree                    Degree                 @relation(fields: [degreeId], references: [id])
  degreeId                  String
  // TODO: connect to course requirement

  @@id([area, subArea, degreeId])
}

enum RequirementKind {
  major
  support
  elective
}

model CourseRequirement {
  course                    Course                 @relation(fields: [courseCode], references: [code])
  courseCode                String
  kind                      RequirementKind
  recommendedCompletion     RecommendedCompletion? @relation(fields: [recommendedCompletionYear, recommendedCompletionTerm], references: [year, term])
  recommendedCompletionYear Int?
  recommendedCompletionTerm Term?
  RequirementGroup          CourseRequirementGroup @relation(fields: [requirementGroupId], references: [id])
  requirementGroupId        Int

  @@id([courseCode, requirementGroupId])
}

enum RequirementGroupKind {
  or
  and
}

// represents a series (such as PHYS 1,2,3) or a list of choices (such as an elective)
model CourseRequirementGroup {
  id              Int                      @id @default(autoincrement())
  groupKind       RequirementGroupKind
  coursesKind     RequirementKind
  // e.x. Life Science Support where coursesKind is elective
  courseKindInfo  String?
  courses         CourseRequirement[]
  // child and parent are swapped in the relation name because it is referring to the reference to itself
  // i.e. the reference to this groups parent views this group as the child
  parentGroup     CourseRequirementGroup?  @relation("toParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId        Int?
  childGroups     CourseRequirementGroup[] @relation("toParent")
  // should be total units for and group or total required for or group
  unitsOf         Int?
  degree          Degree?                  @relation(fields: [degreeId], references: [id])
  concentration   Concentration?           @relation(fields: [concentrationId], references: [id])
  degreeId        String?
  concentrationId String?

  @@index([id])
}

enum RequirementsKind {
  degree
  concentration
}

model Concentration {
  id                 String                   @id
  name               String
  courseRequirements CourseRequirementGroup[]
  degree             Degree                   @relation(fields: [degreeId], references: [id])
  degreeId           String

  @@unique([degreeId, name])
}

model Degree {
  id             String                   @id
  name           String
  link           String
  // TODO: make this an enum of BS, BA, etc.
  kind           String
  requirements   CourseRequirementGroup[]
  concentrations Concentration[]
  GERequirement  GERequirement[]

  @@unique([name, kind])
  @@index([id])
}

model GEAreaFullfillmentCourse {
  area     GEArea
  subArea  GESubArea
  courseId String
  course   Course    @relation(fields: [courseId], references: [code])

  @@id([area, subArea, courseId])
}

model User {
  calPolyUsername String          @id
  year            Int
  flowcharts      UserFlowchart[]
}

model UserFlowchart {
  id                  Int    @id @default(autoincrement())
  user                User   @relation(fields: [userCalPolyUsername], references: [calPolyUsername])
  startYear           Int
  userCalPolyUsername String
}
